<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>Image Downloader with Progress</title>
    <link rel="stylesheet" href="style.css">
    <link
    href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css"
    rel="stylesheet"
/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <div class="wrapper">
        <header>
            <i class="ri-arrow-left-line"></i>
            <p>Download Image</p>
        </header>
        <form action="#">
            <div class="div">
            <p>Paste URL</p>
            <input type="url" id="file-url" placeholder="Paste image URL" required>
            </div>
            <div class="input-group">
                <div class="div">
                    <p>Width</p>
                    <input type="number" id="width" placeholder="Width">
                </div>
                <div  class="div">
                    <p>Height</p>
                    <input type="number" id="height" placeholder="Height">
                </div>
                
            </div>
            <div class="input-group">
                <div class="fileDiv div">
                <label for="file-type">File Type:</label>
                <select id="file-type">
                    <option value="png">PNG</option>
                    <option value="jpg">JPG</option>
                    <option value="jpeg">JPEG</option>
                </select>
                </div>
            </div>
            <div class="input-group div" id="quality-control">
                <label for="quality">Quality (1-100 for JPG/JPEG):</label>
                <input type="number" id="quality" min="1" max="100" placeholder="100">
            </div>
            <div class="input-group">
                <div class="downloadDiv div">
                    <label for="download-type">Download Type:</label>
                    <select id="download-type">
                        <option value="original">Original</option>
                        <option value="resized">Resized</option>
                    </select>
                </div>
            </div>
            <button type="button" id="download-btn">Download File</button>
        </form>

        <div class="progress-wrapper">
            <div class="progress-bar">
                <div class="progress"></div>
            </div>
            <div class="progress-text">0%</div>
        </div>


    </div>

    <script>
        const fileInput = document.getElementById('file-url');
        const downloadBtn = document.getElementById('download-btn');
        const resetBtn = document.getElementById('reset-btn');
        const widthInput = document.getElementById('width');
        const heightInput = document.getElementById('height');
        const fileTypeSelect = document.getElementById('file-type');
        const qualityInput = document.getElementById('quality');
        const downloadTypeSelect = document.getElementById('download-type');
        const qualityControl = document.getElementById('quality-control');
        const progressWrapper = document.querySelector('.progress-wrapper');
        const progressBar = document.querySelector('.progress');
        const progressText = document.querySelector('.progress-text');
        const historyList = document.getElementById('history-list');

        // Show/Hide quality input for JPG/JPEG
        fileTypeSelect.addEventListener('change', () => {
            qualityControl.style.display = (fileTypeSelect.value === 'jpg' || fileTypeSelect.value === 'jpeg') ? 'block' : 'none';
        });

        downloadBtn.addEventListener('click', () => {
            const url = fileInput.value.trim();
            const width = widthInput.value.trim();
            const height = heightInput.value.trim();
            const fileType = fileTypeSelect.value;
            const quality = qualityInput.value.trim();
            const downloadType = downloadTypeSelect.value;

            if (url) {
                fetchFileDetails(url);
            } else {
                alert('Please enter a valid URL.');
            }
        });

        function fetchFileDetails(url) {
            fetch(url, { method: 'HEAD' })
                .then(response => {
                    if (response.ok) {
                        const fileSize = response.headers.get('Content-Length');
                        const sizeInKB = (fileSize / 1024).toFixed(2);
                        if (confirm(`File Size: ${sizeInKB} KB. Do you want to continue?`)) {
                            downloadImage(url);
                        }
                    } else {
                        alert('File not found. Please check the URL.');
                    }
                })
                .catch(() => {
                    alert('Error fetching file details.');
                });
        }

        function downloadImage(url) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'blob';

            xhr.onprogress = function(event) {
                if (event.lengthComputable) {
                    const percentComplete = Math.round((event.loaded / event.total) * 100);
                    progressBar.style.width = percentComplete + '%';
                    progressText.innerText = percentComplete + '%';
                }
            };

            xhr.onload = function() {
                if (xhr.status === 200) {
                    const blob = xhr.response;
                    const img = new Image();
                    img.src = URL.createObjectURL(blob);

                    img.onload = function() {
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');

                        if (downloadTypeSelect.value === 'resized') {
                            const width = widthInput.value || img.width;
                            const height = heightInput.value || img.height;
                            canvas.width = width;
                            canvas.height = height;
                            ctx.drawImage(img, 0, 0, width, height);
                        } else {
                            canvas.width = img.width;
                            canvas.height = img.height;
                            ctx.drawImage(img, 0, 0);
                        }

                        const qualityValue = qualityInput.value && fileTypeSelect.value === 'jpg' ? qualityInput.value / 100 : 1.0;
                        const dataUrl = canvas.toDataURL(`image/${fileTypeSelect.value}`, qualityValue);

                        const aTag = document.createElement('a');
                        aTag.href = dataUrl;
                        aTag.download = `downloaded-image.${fileTypeSelect.value}`;
                        document.body.appendChild(aTag);
                        aTag.click();
                        aTag.remove();

                        updateDownloadHistory(url);
                        notifyUser('Download complete!');
                        resetProgress();
                    };

                    img.onerror = function() {
                        alert('Failed to download the image. Please check the URL.');
                        resetProgress();
                    };
                } else {
                    alert('Failed to download the image. Please check the URL.');
                    resetProgress();
                }
            };

            xhr.onerror = function() {
                alert('Network error. Please try again.');
                resetProgress();
            };

            xhr.send();
        }

        function updateDownloadHistory(url) {
            const historyItem = document.createElement('div');
            historyItem.classList.add('history-item');
            historyItem.innerHTML = `<span>${url}</span><span class="remove-btn" onclick="removeFromHistory(this)">Remove</span>`;
            historyList.appendChild(historyItem);
        }

        function removeFromHistory(element) {
            element.parentElement.remove();
        }

        function notifyUser(message) {
            alert(message);
        }

        function resetProgress() {
            progressBar.style.width = '0';
            progressText.innerText = '0%';
            progressWrapper.style.display = 'none';
            downloadBtn.innerText = 'Download File';
        }

        resetBtn.addEventListener('click', () => {
            fileInput.value = '';
            widthInput.value = '';
            heightInput.value = '';
            qualityInput.value = '';
            progressWrapper.style.display = 'none';
            downloadBtn.innerText = 'Download File';
            historyList.innerHTML = ''; // Clear download history
        });
    </script>
</body>
</html>



































        <form action="#">
            <div class="div">
            <p>Paste URL</p>
            <input type="url" id="file-url" placeholder="Paste image URL" required>
            </div>
            <div class="input-group">
                <div class="div">
                    <p>Width</p>
                    <input type="number" id="width" placeholder="Width">
                </div>
                <div  class="div">
                    <p>Height</p>
                    <input type="number" id="height" placeholder="Height">
                </div>
                
            </div>
            <div class="input-group">
                <div class="fileDiv div">
                <label for="file-type">File Type:</label>
                <select id="file-type">
                    <option value="png">PNG</option>
                    <option value="jpg">JPG</option>
                    <option value="jpeg">JPEG</option>
                </select>
                </div>
            </div>
            <div class="input-group" id="quality-control">
                <label for="quality">Quality (1-100 for JPG/JPEG):</label>
                <input type="number" id="quality" min="1" max="100" placeholder="100">
            </div>
            <div class="input-group">
                <div class="downloadDiv">
                    <label for="download-type">Download Type:</label>
                    <select id="download-type">
                        <option value="original">Original</option>
                        <option value="resized">Resized</option>
                    </select>
                </div>
            </div>
            <button type="button" id="download-btn">Download File</button>
        </form>










        //4k image size
        5472*3648